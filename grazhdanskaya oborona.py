"""
Штаб гражданской обороны Тридесятой области решил обновить план спасения на случай ядерной атаки. Известно, что все n селений Тридесятой области находятся вдоль одной прямой дороги. Вдоль дороги также расположены m бомбоубежищ, в которых жители селений могут укрыться на случай ядерной атаки.

Чтобы спасение в случае ядерной тревоги проходило как можно эффективнее, необходимо для каждого селения определить ближайшее к нему бомбоубежище.

Формат ввода

В первой строке вводится число n - количество селений (1 <= n <= 100000). Вторая строка содержит n различных целых чисел, i-е из этих чисел задает расстояние от начала дороги до i-го селения. В третьей строке входных данных задается число m - количество бомбоубежищ (1 <= m <= 100000). Четвертая строка содержит m различных целых чисел, i-е из этих чисел задает расстояние от начала дороги до i-го бомбоубежища. Все расстояния положительны и не превышают 10⁹. Селение и убежище могут располагаться в одной точке.

Формат вывода

Выведите n чисел - для каждого селения выведите номер ближайшего к нему бомбоубежища. Бомбоубежища пронумерованы от 1 до m в том порядке, в котором они заданы во входных данных.

"""

seleniy = int(input())
sel_km = tuple(map(int, input().split()))
bomb = int(input())
bomb_km = tuple(map(int, input().split()))
dist_s = list()
dist_bomb = list()
for i in range(seleniy):
    dist_s.append((sel_km[i], i+1))
for j in range(bomb):
    dist_bomb.append((bomb_km[j], j+1))
dist_s.sort()
dist_bomb.sort()
to_out = list()
km = 1
if bomb == 1:
    [print(1, end=' ') for i in dist_s]
else:
    for sel in dist_s:
        while km <= bomb - 1:
            if dist_bomb[km - 1][0] == sel[0]:
                to_out.append((sel[1], dist_bomb[km - 1][1]))
                break
            elif dist_bomb[bomb - 1][0] == sel[0]:
                to_out.append((sel[1], dist_bomb[bomb - 1][1]))
                break
            elif abs(dist_bomb[km - 1][0] - sel[0]) <=\
                    abs(dist_bomb[km][0] - sel[0]):
                to_out.append((sel[1], dist_bomb[km - 1][1]))
                break
            elif km == bomb - 1 and abs(dist_bomb[km - 1][0] - sel[0]) >\
                    abs(dist_bomb[bomb - 1][0] - sel[0]):
                to_out.append((sel[1], dist_bomb[bomb - 1][1]))
                break
            km += 1
    to_out.sort()
    for g in to_out:
        print(g[1], end=' ')
